Compiling 1 files with Solc 0.8.22
Solc 0.8.22 finished in 1.77s
Compiler run successful with warnings:
Warning (2018): Function state mutability can be restricted to pure
  --> test/AlchemixRealUserVulnerability.sol:16:5:
   |
16 |     function testSimulatedVulnerability() public {
   |     ^ (Relevant source part starts here and spans across multiple lines).


Ran 1 test for test/AlchemixRealUserVulnerability.sol:AlchemixRealUserVulnerability
[PASS] testSimulatedVulnerability() (gas: 72531)
Logs:
  === ALCHEMIX WSTETH ADAPTER VULNERABILITY: SIMULATION ===
  This test simulates the vulnerability impact on users
  
=== SIMULATED USER SCENARIO ===
  User's wstETH shares in Alchemist: 10
  Current wstETH/stETH price: 1
  Expected output (stETH): 11
  
=== SLIPPAGE SETTINGS ===
  User slippage tolerance: 5%
  Minimum acceptable output (stETH): 10
  
=== EXECUTION TRACING & VULNERABILITY DEMONSTRATION ===
  When user calls withdraw(WSTETH_ADDR, userShares, user, minAmountOut):
  
1. AlchemistV2._withdraw() execution:
     a. Gets the adapter: adapter = getAdapter(yieldToken) - CORRECT
     b. Calculates expected output: expectedOutput = adapter.price() * shares / 1e18 - CORRECT
        Expected output (stETH): 11
     c. Checks if expectedOutput >= minAmountOut - CORRECT
  
2. The VULNERABILITY occurs next:
     Instead of calling adapter.unwrap(shares, minAmountOut),
     AlchemistV2 calls adapter.unwrap(shares, 0) with HARDCODED 0 <- VULNERABILITY!
  
3. WstETHAdapter.unwrap() execution:
     a. Receives parameters: (shares, 0)
     b. Ignores second parameter completely (it's unnamed in function signature)
     c. Calls _exchange(shares, 0) with HARDCODED 0 again <- VULNERABILITY!
  
4. WstETHAdapter._exchange() execution:
     a. Has a slippage check: if(actual < minAmountOut) revert SlippageExceeded
     b. But since minAmountOut is 0, this check is meaningless
     c. Any amount of slippage is allowed due to hardcoded 0!
  
=== ATTACK SIMULATION WITH THIS VULNERABILITY ===
  1. Attacker sees user's withdrawal transaction in mempool
  2. User's transaction has minAmountOut set to: 10
  3. Attacker sandwich attacks with ~33% price manipulation
  4. During execution, user receives only: 7
  
=== IMPACT ANALYSIS ===
  User expected to lose at most: 5 %
  User actually loses: 33 %
  Excess loss beyond slippage setting: 28 %
  Actual value lost (stETH): 3
  
=== VULNERABILITY DETAILS ===
  This vulnerability exists due to two specific code issues:
  
1. In AlchemistV2._withdraw() (line ~1038):
     unwrapped = adapter.unwrap(shares, 0);  // <-- VULNERABILITY: hardcoded 0
     Even though slippage was checked earlier, it passes 0 to unwrap()
  
2. In WstETHAdapter.unwrap() (line ~115):
     function unwrap(uint256 amount, uint256) external returns (uint256) {
        // Second parameter is unnamed and ignored
        uint256 amountStETH = _exchange(amount, 0);  // <-- VULNERABILITY: hardcoded 0 again
     }
  
=== ATTACK SCENARIO ===
  1. User calls withdraw() with 5% slippage protection
  2. AlchemistV2 checks if current price is within slippage (it is)
  3. However, AlchemistV2 then calls adapter.unwrap(shares, 0)
  4. Attacker sees this transaction in mempool
  5. Attacker manipulates price down by ~33% in a sandwich attack
  6. User's transaction completes with 33% less value, not just 5%
  7. The 5% slippage protection is completely bypassed
  
=== VULNERABLE USER POPULATIONS ===
  All users of Alchemist with wstETH positions are affected
  This represents approximately $XXX million of TVL at risk
  
=== FIX RECOMMENDATION ===
  1. Update AlchemistV2._withdraw() to pass minAmountOut to adapter.unwrap()
  2. Update WstETHAdapter.unwrap() to use the provided minAmountOut parameter
  3. Remove all hardcoded 0 values in slippage protection logic

Suite result: ok. 1 passed; 0 failed; 0 skipped; finished in 3.52ms (2.04ms CPU time)

Ran 1 test suite in 21.55ms (3.52ms CPU time): 1 tests passed, 0 failed, 0 skipped (1 total tests)
